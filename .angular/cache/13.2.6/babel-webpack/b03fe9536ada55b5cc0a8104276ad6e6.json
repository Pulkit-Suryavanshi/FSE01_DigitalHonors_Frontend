{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./profile/user/user.service\";\nimport * as i2 from \"@angular/router\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(userService, router) {\n      this.userService = userService;\n      this.router = router;\n      this.loggedInUser = new BehaviorSubject(false);\n    }\n\n    login(user) {\n      return this.userService.login(user).subscribe(response => {\n        const authUser = {};\n        authUser['username'] = user === null || user === void 0 ? void 0 : user['username'];\n        authUser['loggedIn'] = response['loggedIn'];\n        this.loggedInUser.next(authUser);\n\n        if (authUser['loggedIn'] == true) {\n          this.router.navigate(['/profile', authUser['username']]);\n        }\n      }, error => {\n        alert(error.error.msg);\n        const unauth = {};\n        unauth['loggedIn'] = false;\n        this.loggedInUser.next(unauth);\n      });\n    }\n\n    isAuthenticated() {\n      var _a;\n\n      if (((_a = this.loggedInUser.getValue()) === null || _a === void 0 ? void 0 : _a['loggedIn']) == true) return true;\n      return false;\n    }\n\n    logout() {\n      this.loggedInUser.next({\n        loggedIn: false\n      });\n      this.router.navigate(['/login']);\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}